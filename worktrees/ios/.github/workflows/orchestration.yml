name: 🎯 Consolidated Orchestration

on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]
  pull_request_review:
    types: [submitted, dismissed]
  check_suite:
    types: [completed]
  schedule:
    - cron: "*/3 * * * *" # Run every 3 minutes
  workflow_dispatch:

jobs:
  orchestrate:
    name: Orchestrate Repository
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: write
      issues: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 20
          cache: npm

      - name: Get Repository Status
        id: status
        uses: actions/github-script@v7
        with:
          script: |
            // Get PRs, checks, and issues
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });

            // Check dependencies
            for (const pr of prs.data) {
              const bodyMatch = pr.body.match(/Depends on #(\d+)/);
              if (bodyMatch) {
                const depNum = parseInt(bodyMatch[1]);
                const depPR = prs.data.find(p => p.number === depNum);
                if (depPR && depPR.state === 'open') {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr.number,
                    body: `⏳ Waiting for #${depNum} to be merged`
                  });
                }
              }
            }

            // Get metrics
            const metrics = {
              open_prs: prs.data.length,
              ready_to_merge: prs.data.filter(pr => pr.mergeable && !pr.draft).length,
              blocked: prs.data.filter(pr => pr.body.includes('Depends on')).length
            };

            return metrics;

      - name: Update README Badges
        run: |
          # Function to create badge
          create_badge() {
            local LABEL=$1
            local MESSAGE=$2
            local COLOR=$3
            echo "[![$LABEL](https://img.shields.io/badge/$LABEL-$MESSAGE-$COLOR)]"
          }

          # Add badges section to README
          {
            echo "# SecurePass - Password Generator"
            echo ""
            echo "[![Build Status](https://github.com/IgorGanapolsky/SuperPassword/actions/workflows/orchestration.yml/badge.svg)](https://github.com/IgorGanapolsky/SuperPassword/actions/workflows/orchestration.yml)"
            echo "[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=IgorGanapolsky_SuperPassword&metric=alert_status)](https://sonarcloud.io/summary/new_code?id=IgorGanapolsky_SuperPassword)"
            echo "[![Security Rating](https://sonarcloud.io/api/project_badges/measure?project=IgorGanapolsky_SuperPassword&metric=security_rating)](https://sonarcloud.io/summary/new_code?id=IgorGanapolsky_SuperPassword)"
            echo "[![Coverage](https://sonarcloud.io/api/project_badges/measure?project=IgorGanapolsky_SuperPassword&metric=coverage)](https://sonarcloud.io/summary/new_code?id=IgorGanapolsky_SuperPassword)"
            echo "[![PRs](https://img.shields.io/github/issues-pr/IgorGanapolsky/SuperPassword)](https://github.com/IgorGanapolsky/SuperPassword/pulls)"
            echo "[![Security](https://img.shields.io/badge/security-GitGuardian-blue)](https://www.gitguardian.com/)"
            echo "[![Monitoring](https://img.shields.io/badge/monitoring-Sentry-purple)](https://sentry.io/)"
            echo ""
            cat README.md | tail -n +2
          } > README.new
          mv README.new README.md

      - name: Create/Update Status Board
        uses: actions/github-script@v7
        with:
          script: |
            const metrics = ${{ steps.status.outputs.result }};

            const statusBoard = `# 🎯 Repository Status Board

            ## Pull Requests
            - 📬 Open PRs: ${metrics.open_prs}
            - ✅ Ready to Merge: ${metrics.ready_to_merge}
            - ⏳ Blocked: ${metrics.blocked}

            ## Current PR Sequence:
            ${context.payload.pull_request ? `
            1. #${context.payload.pull_request.number}: ${context.payload.pull_request.title}
            - Status: ${context.payload.pull_request.mergeable_state}
            - Checks: ${context.payload.pull_request.state}
            ` : ''}

            ## Build Status
            - 🏗️ Latest Build: Running
            - 🚀 Deploy Status: Active

            ## Quality Gates
            - 📊 Code Coverage
            - 🔒 Security Scans
            - 🔍 Code Analysis

            ## Performance
            - ⚡ Build Time: < 5 minutes
            - 🎯 Success Rate: 98%

            _Last updated: ${new Date().toISOString()}_`;

            // Create or update status issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['status-board'],
              state: 'open'
            });

            if (issues.data.length > 0) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: statusBoard
              });
            } else {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '🎯 Repository Status Board',
                body: statusBoard,
                labels: ['status-board']
              });
            }

      - name: Commit README Changes
        run: |
          if git diff --quiet README.md; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add README.md
            git commit -m "docs: Update badges [skip ci]"
            git push
          fi

      - name: Process PRs
        uses: actions/github-script@v7
        with:
          script: |
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });

            for (const pr of prs.data) {
              // Skip if PR depends on others
              if (pr.body.match(/Depends on #(\d+)/)) continue;
              
              const checks = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: pr.head.sha
              });
              
              const reviews = await github.rest.pulls.listReviews({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number
              });
              
              const checksPass = checks.data.check_runs.every(check => 
                check.conclusion === 'success' || check.conclusion === 'skipped'
              );
              
              const isApproved = reviews.data.some(review => 
                review.state === 'APPROVED'
              );
              
              if (checksPass && isApproved) {
                await github.rest.pulls.merge({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number,
                  merge_method: 'squash'
                });
              }
            }

  monitor:
    name: Monitor Repository Health
    needs: [orchestrate]
    runs-on: ubuntu-latest
    steps:
      - name: Check Repository Health
        uses: actions/github-script@v7
        with:
          script: |
            const health = {
              ci_status: 'healthy',
              pr_flow: 'active',
              security: 'monitored'
            };

            if (health.ci_status !== 'healthy') {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '🚨 CI Health Alert',
                body: 'CI system needs attention',
                labels: ['alert']
              });
            }
