name: PR Health Monitor

on:
  schedule:
    - cron: "0 9 * * *" # daily at 9am UTC
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Dry run mode"
        required: false
        default: "false"

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  monitor:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Generate PR Health Report
        id: report
        run: |
          # Get all PRs
          OPEN_PRS=$(gh pr list --repo ${{ github.repository }} --state open --json number,title,createdAt,author,labels,isDraft,mergeable,mergeStateStatus)
          CLOSED_PRS=$(gh pr list --repo ${{ github.repository }} --state closed --limit 30 --json number,title,closedAt,mergedAt)

          # Calculate metrics
          TOTAL_OPEN=$(echo "$OPEN_PRS" | jq 'length')
          TOTAL_DRAFTS=$(echo "$OPEN_PRS" | jq '[.[] | select(.isDraft == true)] | length')
          TOTAL_MERGEABLE=$(echo "$OPEN_PRS" | jq '[.[] | select(.mergeable == "MERGEABLE")] | length')
          TOTAL_BLOCKED=$(echo "$OPEN_PRS" | jq '[.[] | select(.mergeStateStatus == "BLOCKED")] | length')

          # Calculate age of PRs
          NOW=$(date +%s)
          OLD_PRS=""
          STALE_COUNT=0

          for row in $(echo "$OPEN_PRS" | jq -r '.[] | @base64'); do
            _jq() {
              echo ${row} | base64 --decode | jq -r ${1}
            }
            
            NUMBER=$(_jq '.number')
            TITLE=$(_jq '.title')
            CREATED=$(_jq '.createdAt')
            AUTHOR=$(_jq '.author.login')
            
            CREATED_TS=$(date -d "$CREATED" +%s 2>/dev/null || date -j -f "%Y-%m-%dT%H:%M:%SZ" "$CREATED" +%s 2>/dev/null || echo 0)
            AGE_DAYS=$(( ($NOW - $CREATED_TS) / 86400 ))
            
            if [ $AGE_DAYS -gt 7 ]; then
              STALE_COUNT=$((STALE_COUNT + 1))
              OLD_PRS="${OLD_PRS}- PR #${NUMBER}: ${TITLE} (@${AUTHOR}, ${AGE_DAYS} days old)\n"
            fi
          done

          # Calculate merge stats (last 30 PRs)
          MERGED_COUNT=$(echo "$CLOSED_PRS" | jq '[.[] | select(.mergedAt != null)] | length')
          CLOSED_COUNT=$(echo "$CLOSED_PRS" | jq '[.[] | select(.mergedAt == null)] | length')

          # Generate report
          cat > pr-health-report.md << EOF
          # 📊 PR Health Report

          **Date:** $(date -u +"%Y-%m-%d %H:%M UTC")

          ## 📈 Current Status
          - **Open PRs:** ${TOTAL_OPEN}
          - **Draft PRs:** ${TOTAL_DRAFTS}
          - **Ready to merge:** ${TOTAL_MERGEABLE}
          - **Blocked:** ${TOTAL_BLOCKED}
          - **Stale (>7 days):** ${STALE_COUNT}

          ## 📊 Last 30 PRs
          - **Merged:** ${MERGED_COUNT}
          - **Closed without merging:** ${CLOSED_COUNT}
          - **Merge rate:** $(( $MERGED_COUNT * 100 / ($MERGED_COUNT + $CLOSED_COUNT) ))%

          ## ⏰ PRs Needing Attention (>7 days old)
          ${OLD_PRS:-"None! All PRs are fresh. 🎉"}

          ## 💡 Recommendations
          EOF

          if [ $STALE_COUNT -gt 5 ]; then
            echo "- ⚠️ High number of stale PRs. Consider reviewing or closing old PRs." >> pr-health-report.md
          fi

          if [ $TOTAL_DRAFTS -gt $((TOTAL_OPEN / 2)) ]; then
            echo "- 📝 Many draft PRs. Consider marking them ready for review or closing if abandoned." >> pr-health-report.md
          fi

          if [ $TOTAL_BLOCKED -gt 3 ]; then
            echo "- 🚧 Several blocked PRs. Check for merge conflicts or failing checks." >> pr-health-report.md
          fi

          if [ $STALE_COUNT -eq 0 ] && [ $TOTAL_BLOCKED -eq 0 ]; then
            echo "- ✅ Repository health looks great! Keep up the good work." >> pr-health-report.md
          fi

          echo "" >> pr-health-report.md
          echo "---" >> pr-health-report.md
          echo "*Generated by PR Health Monitor • [Configure](.github/workflows/pr-health.yml)*" >> pr-health-report.md
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Post report as issue
        if: github.event.inputs.dry_run != 'true'
        run: |
          # Close previous report issues
          gh issue list --repo ${{ github.repository }} --label "pr-health-report" --state open --json number \
            | jq -r '.[].number' | xargs -I {} gh issue close {} --repo ${{ github.repository }} || true

          # Create new issue with report
          gh issue create \
            --repo ${{ github.repository }} \
            --title "PR Health Report - $(date -u +%Y-%m-%d)" \
            --body-file pr-health-report.md \
            --label "pr-health-report,automation"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Display report (dry run)
        if: github.event.inputs.dry_run == 'true'
        run: cat pr-health-report.md
