name: Merge Queue Helper

on:
  pull_request_target:
    types: [opened, synchronize, reopened]
  check_suite:
    types: [completed]
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: write
  checks: read

jobs:
  auto-merge-dependabot:
    if: github.event_name == 'pull_request_target' && github.actor == 'dependabot[bot]'
    runs-on: ubuntu-latest
    steps:
      - name: Auto-approve Dependabot PRs
        uses: hmarr/auto-approve-action@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Enable auto-merge for Dependabot PRs
        run: |
          gh pr merge ${{ github.event.pull_request.number }} \
            --repo ${{ github.repository }} \
            --auto \
            --squash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  handle-commands:
    if: github.event_name == 'issue_comment' && github.event.issue.pull_request
    runs-on: ubuntu-latest
    steps:
      - name: Check for commands
        id: check
        run: |
          COMMENT="${{ github.event.comment.body }}"
          if [[ "$COMMENT" == "/rerun"* ]]; then
            echo "command=rerun" >> $GITHUB_OUTPUT
          elif [[ "$COMMENT" == "/update"* ]]; then
            echo "command=update" >> $GITHUB_OUTPUT
          elif [[ "$COMMENT" == "/merge"* ]]; then
            echo "command=merge" >> $GITHUB_OUTPUT
          elif [[ "$COMMENT" == "/approve"* ]]; then
            echo "command=approve" >> $GITHUB_OUTPUT
          fi

      - name: Execute command
        if: steps.check.outputs.command != ''
        run: |
          PR_NUMBER=${{ github.event.issue.number }}
          COMMAND=${{ steps.check.outputs.command }}

          case $COMMAND in
            rerun)
              echo "Rerunning failed checks..."
              gh run rerun --failed --repo ${{ github.repository }}
              gh pr comment $PR_NUMBER --repo ${{ github.repository }} \
                --body "ðŸ”„ Rerunning failed checks as requested by @${{ github.event.comment.user.login }}"
              ;;
            update)
              echo "Updating PR branch..."
              gh pr merge $PR_NUMBER --repo ${{ github.repository }} --update-branch
              gh pr comment $PR_NUMBER --repo ${{ github.repository }} \
                --body "ðŸ”„ Updated PR with latest changes from base branch as requested by @${{ github.event.comment.user.login }}"
              ;;
            merge)
              echo "Enabling auto-merge..."
              gh pr merge $PR_NUMBER --repo ${{ github.repository }} --auto --squash
              gh pr comment $PR_NUMBER --repo ${{ github.repository }} \
                --body "âœ… Auto-merge enabled by @${{ github.event.comment.user.login }}"
              ;;
            approve)
              echo "Auto-approving PR..."
              gh pr review $PR_NUMBER --repo ${{ github.repository }} --approve
              gh pr comment $PR_NUMBER --repo ${{ github.repository }} \
                --body "âœ… PR approved by @${{ github.event.comment.user.login }}"
              ;;
          esac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  smart-merge:
    if: github.event_name == 'check_suite' && github.event.check_suite.conclusion == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Find associated PR
        id: pr
        run: |
          PR_NUMBER=$(gh api repos/${{ github.repository }}/commits/${{ github.event.check_suite.head_sha }}/pulls --jq '.[0].number')
          if [ -n "$PR_NUMBER" ]; then
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if ready to merge
        if: steps.pr.outputs.pr_number != ''
        run: |
          PR_DATA=$(gh pr view ${{ steps.pr.outputs.pr_number }} --repo ${{ github.repository }} --json mergeable,autoMergeRequest,isDraft)
          MERGEABLE=$(echo "$PR_DATA" | jq -r '.mergeable')
          AUTO_MERGE=$(echo "$PR_DATA" | jq -r '.autoMergeRequest')
          IS_DRAFT=$(echo "$PR_DATA" | jq -r '.isDraft')

          if [ "$MERGEABLE" == "MERGEABLE" ] && [ "$AUTO_MERGE" == "null" ] && [ "$IS_DRAFT" == "false" ]; then
            echo "Enabling auto-merge for ready PR..."
            gh pr merge ${{ steps.pr.outputs.pr_number }} --repo ${{ github.repository }} --auto --squash
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
